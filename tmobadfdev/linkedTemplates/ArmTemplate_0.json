{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "tmobadfdev"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://tmobsourcedev.dfs.core.windows.net/"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://tmobkeyvaultdev.vault.azure.net/"
		},
		"AzureDataLakeStorageDev_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().storage_url}"
		},
		"SalesTrigger_properties_pipeline_parameters_subject": {
			"type": "string",
			"defaultValue": "Sales"
		},
		"SalesTrigger_properties_pipeline_parameters_storage_secret": {
			"type": "string",
			"defaultValue": "storage-souce-dev-key"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SchemaDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "subject",
						"type": "varchar"
					},
					{
						"name": "schema_str",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "schema_table"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorageDev')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"secret_name": {
						"type": "string",
						"defaultValue": "storage-raw-dev-key"
					},
					"storage_url": {
						"type": "string",
						"defaultValue": "https://tmobsourcedev.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorageDev_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().secret_name",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CatalogDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageDev",
					"type": "LinkedServiceReference",
					"parameters": {
						"secret_name": {
							"value": "@dataset().storage_secret",
							"type": "Expression"
						},
						"storage_url": {
							"value": "@dataset().storage_url",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"subject": {
						"type": "string"
					},
					"storage_secret": {
						"type": "string"
					},
					"storage_url": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().subject",
							"type": "Expression"
						},
						"fileSystem": "landing"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageDev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageDev",
					"type": "LinkedServiceReference",
					"parameters": {
						"secret_name": "storage-raw-dev-key",
						"storage_url": "https://tmobrawdev.dfs.core.windows.net/"
					}
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					},
					"subject": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().subject",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageDev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RawDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageDev",
					"type": "LinkedServiceReference",
					"parameters": {
						"secret_name": {
							"value": "@dataset().storage_secret",
							"type": "Expression"
						},
						"storage_url": {
							"value": "@dataset().storage_url",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"subject": {
						"type": "string",
						"defaultValue": "Sales/20230408"
					},
					"storage_secret": {
						"type": "string",
						"defaultValue": "storage-raw-dev-key"
					},
					"file_name": {
						"type": "string",
						"defaultValue": "sales-20230408.csv"
					},
					"container": {
						"type": "string",
						"defaultValue": "imported"
					},
					"storage_url": {
						"type": "string",
						"defaultValue": "https://tmobrawdev.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().subject",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageDev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageDev",
					"type": "LinkedServiceReference",
					"parameters": {
						"secret_name": {
							"value": "@dataset().storage_secret",
							"type": "Expression"
						},
						"storage_url": {
							"value": "@dataset().storage_url",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"subject": {
						"type": "string",
						"defaultValue": "Sales/20230408"
					},
					"storage_secret": {
						"type": "string"
					},
					"file_name": {
						"type": "string",
						"defaultValue": "sales-20230408.csv"
					},
					"storage_url": {
						"type": "string"
					},
					"enable_header": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().subject",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": {
						"value": "@dataset().enable_header",
						"type": "Expression"
					},
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageDev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy-source-raw')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceDataset",
								"type": "DatasetReference",
								"parameters": {
									"subject": {
										"value": "@concat(\n    concat(\n        pipeline().parameters.subject, \n        '/'\n    ),\n    formatDateTime(pipeline().TriggerTime, 'yyyyMMdd')\n)",
										"type": "Expression"
									},
									"storage_secret": {
										"value": "@pipeline().parameters.storage_secret",
										"type": "Expression"
									},
									"file_name": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									},
									"storage_url": {
										"value": "@pipeline().globalParameters.source_storage_url",
										"type": "Expression"
									},
									"enable_header": {
										"value": "@bool(1)",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"structure"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "LookUpAuditTable",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT schema_str as 'schema' FROM [dbo].[schema_table] WHERE subject = '@{pipeline().parameters.subject}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SchemaDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookUpAuditTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get Metadata1').output.structure,\n    json(activity('LookUpAuditTable').output.firstRow.schema)\n)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SourceDataset",
											"type": "DatasetReference",
											"parameters": {
												"subject": {
													"value": "@concat(\n    concat(\n        pipeline().parameters.subject, \n        '/'\n    ),\n    formatDateTime(pipeline().TriggerTime, 'yyyyMMdd')\n)",
													"type": "Expression"
												},
												"storage_secret": {
													"value": "@pipeline().parameters.storage_secret",
													"type": "Expression"
												},
												"file_name": {
													"value": "@pipeline().parameters.file_name",
													"type": "Expression"
												},
												"storage_url": {
													"value": "@pipeline().globalParameters.source_storage_url",
													"type": "Expression"
												},
												"enable_header": {
													"value": "@bool(0)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "RawDataset",
											"type": "DatasetReference",
											"parameters": {
												"subject": {
													"value": "@concat(\n    concat(\n        pipeline().parameters.subject, \n        '/'\n    ),\n    utcnow('yyyyMMdd')\n)",
													"type": "Expression"
												},
												"storage_secret": "storage-raw-dev-key",
												"file_name": {
													"value": "@pipeline().parameters.file_name",
													"type": "Expression"
												},
												"container": {
													"value": "@pipeline().parameters.success_container",
													"type": "Expression"
												},
												"storage_url": {
													"value": "@pipeline().globalParameters.raw_storage_url",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "row_copied",
										"value": {
											"value": "@string(activity('Copy data').output.rowsCopied)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition2",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('row_copied'), pipeline().parameters.number_of_records)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail1",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Failed",
										"errorCode": "400"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Wait2",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"subject": {
						"type": "string",
						"defaultValue": "Sales"
					},
					"storage_secret": {
						"type": "string",
						"defaultValue": "storage-souce-dev-key"
					},
					"file_name": {
						"type": "string",
						"defaultValue": "sales-20230421.csv"
					},
					"success_container": {
						"type": "string",
						"defaultValue": "imported"
					},
					"error_container": {
						"type": "string",
						"defaultValue": "error"
					},
					"number_of_records": {
						"type": "string",
						"defaultValue": "0"
					}
				},
				"variables": {
					"row_copied": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset')]",
				"[concat(variables('factoryId'), '/datasets/SchemaDataset')]",
				"[concat(variables('factoryId'), '/datasets/RawDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw-to-prepared')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RawDataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "RawDataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RawDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "raw-to-prepared",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"subject": "Sales/20230408",
										"storage_secret": "storage-raw-dev-key",
										"file_name": "sales-20230408.csv",
										"container": "imported",
										"storage_url": "https://tmobrawdev.dfs.core.windows.net/"
									},
									"sink1": {
										"subject": "Sales_Processed/20230408",
										"storage_secret": "storage-raw-dev-key",
										"file_name": "sales-20230408.csv",
										"container": "imported",
										"storage_url": "https://tmobrawdev.dfs.core.windows.net/"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/raw-to-prepared')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sales-source-raw')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "checkSourceFile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CatalogDataset",
								"type": "DatasetReference",
								"parameters": {
									"subject": {
										"value": "@pipeline().parameters.subject",
										"type": "Expression"
									},
									"storage_secret": {
										"value": "@pipeline().parameters.storage_secret",
										"type": "Expression"
									},
									"storage_url": {
										"value": "@pipeline().globalParameters.source_storage_url",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "GetRootMetadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CatalogDataset",
								"type": "DatasetReference",
								"parameters": {
									"subject": {
										"value": "@concat(\n    concat(\n        pipeline().parameters.subject, \n        '/'\n    ),\n    formatDateTime(pipeline().TriggerTime, 'yyyyMMdd')\n)",
										"type": "Expression"
									},
									"storage_secret": {
										"value": "@pipeline().parameters.storage_secret",
										"type": "Expression"
									},
									"storage_url": {
										"value": "@pipeline().globalParameters.source_storage_url",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "checkSourceFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "list_of_files",
							"value": {
								"value": "@activity('checkSourceFile').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IterateRootFolder",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetRootMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetRootMetadata').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Filter1",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "SetCurrentFileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@variables('list_of_files')",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item()['file_name'], variables('current_file_name'))\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetCurrentFileName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "current_file_name",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Filter1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(\n    empty(activity('Filter1').output.value)\n)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "CopyData",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "copy-source-raw",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"subject": {
															"value": "@pipeline().parameters.subject",
															"type": "Expression"
														},
														"storage_secret": {
															"value": "@pipeline().parameters.storage_secret",
															"type": "Expression"
														},
														"file_name": {
															"value": "@variables('current_file_name')",
															"type": "Expression"
														},
														"success_container": "imported",
														"error_container": "error",
														"number_of_records": {
															"value": "@activity('Filter1').output.value[0].count",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"subject": {
						"type": "string",
						"defaultValue": "Sales"
					},
					"storage_secret": {
						"type": "string",
						"defaultValue": "storage-souce-dev-key"
					}
				},
				"variables": {
					"list_of_files": {
						"type": "Array"
					},
					"current_file_name": {
						"type": "String"
					},
					"existing_schema": {
						"type": "Array"
					},
					"schema_encoded": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CatalogDataset')]",
				"[concat(variables('factoryId'), '/pipelines/copy-source-raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "sales-source-raw",
						"type": "PipelineReference"
					},
					"parameters": {
						"subject": "[parameters('SalesTrigger_properties_pipeline_parameters_subject')]",
						"storage_secret": "[parameters('SalesTrigger_properties_pipeline_parameters_storage_secret')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2023-04-24T05:10:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/sales-source-raw')]"
			]
		}
	]
}